from aiogram import Bot, types, F
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import Text
from aiogram.filters import Command
from datetime import datetime
from loguru import logger
from config import TOKEN
import asyncio
from keyboards import *
from db import *
from states import *
logger.add("logs.log", rotation="1 week")
bot = Bot(token=TOKEN, parse_mode="HTML", disable_web_page_preview=False)
dp = Dispatcher()



@dp.message(Command('start'))
async def command_start_handler(message: types.Message, state: FSMContext) -> None:
    logger.info(f"–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {str(message.from_user.id)}")
    if not await check_user_exists(str(message.from_user.id)):
        await add_user(tg_id=str(message.from_user.id), amount_left=0)
    await message.answer(f"üëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n", reply_markup=start_keyboard())


@dp.message(F.text=="‚Ü©Ô∏è–û—Ç–º–µ–Ω–∞")
async def get_back(message: types.Message, state: FSMContext):
    await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {str(message.from_user.id)} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer(f"üòä–ß—Ç–æ —Ç–µ–ø–µ—Ä—å, {message.from_user.full_name}?\n–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ!", reply_markup=start_keyboard())
#INCOME HANDLE

@dp.message(F.text=="‚ûï–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income_handler(message: types.Message, state: FSMContext):
    await state.set_state(IncomeForm.pass_income_amount)
    await message.answer(f"‚û°Ô∏è–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö:\nüòî–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–ø–µ–π–∫–∏ –ø–æ–∫–∞ —Ç–æ–∂–µ –Ω–µ–ª—å–∑—è, –Ω–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º:", reply_markup=cancel_keyboard())

@dp.message(IncomeForm.pass_income_amount, F.text.isdigit())
async def input_income_handler(message: types.Message, state: FSMContext):
    data = await state.update_data(income = message.text)
    await state.clear()
    await add_income(message.from_user.id, float(data["income"]))
    await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω\nüíµ –°—É–º–º–∞: {data['income']}", reply_markup=start_keyboard())

#EXPENSE HANDLE

@dp.message(F.text=="‚ûñ–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def get_back_handler(message: types.Message, state: FSMContext):
    await state.set_state(ExpenseForm.pass_expense_category)
    await message.answer(f"üòâ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é!", reply_markup=categories_keyboard())

@dp.message(ExpenseForm.pass_expense_category)
async def input_category_handler(message: types.Message, state: FSMContext):
    await state.update_data(expense_category = message.text)
    await state.set_state(ExpenseForm.pass_expense_amount)
    await message.answer(f"‚û°Ô∏è–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö:", reply_markup=cancel_keyboard())

@dp.message(ExpenseForm.pass_expense_amount, F.text.isdigit())
async def input_income_handler(message: types.Message, state: FSMContext):
    data = await state.update_data(expense_amount = message.text)
    await state.clear()
    await add_expense(tg_id=message.from_user.id, expense_date=str(datetime.datetime.today().strftime('%Y-%m-%d')), expense_amount=int(data["expense_amount"]), category=data["expense_category"])
    await message.answer(f"–†–∞—Å—Ö–æ–¥ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω!\nüóÉÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['expense_category']}\nüí≤ –°—É–º–º–∞: {int(data['expense_amount'])}", reply_markup=start_keyboard())




@dp.message(F.text=="üìä–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥")
async def get_by_time_handler(message: types.Message, state: FSMContext):
    await state.set_state(DateForm.pass_start_date)
    await message.answer(f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î'", reply_markup=categories_keyboard())

@dp.message(DateForm.pass_start_date)
async def time_start_handler(message: types.Message, state: FSMContext):
    await state.update_data(start_time = message.text)
    await state.set_state(DateForm.pass_end_date)
    await message.answer(f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î'", reply_markup=cancel_keyboard())

@dp.message(DateForm.pass_end_date)
async def time_end_handler(message: types.Message, state: FSMContext):
    data = await state.update_data(end_time = message.text)
    await state.clear()
    query = await get_expenses_for_period(start_date=data["start_time"], end_date=data["end_time"], tg_id=str(message.from_user.id))
    ans_query = []
    for i in query:
        ans_query.append(f"{i[2]} - {i[3]} - {i[4]}")
    for i in ans_query:
        await message.answer(f"{i}", reply_markup=remove_expense_keyboard())

@dp.callback_query(F.data == "delete_expense_btn")
async def cancel_handler(callback_query: types.CallbackQuery, state: FSMContext):
    parameters = list(map(str, callback_query.message.text.split(sep = " - ")))
    print(callback_query.from_user.id, parameters[0], parameters[1], parameters[2], sep=",")
    await delete_expense(tg_id = callback_query.from_user.id, expense_date=parameters[0], expense_amount=f"{int(parameters[1])}", category=parameters[2])
    await callback_query.message.delete()
    await callback_query.answer(f"{callback_query.message.text}", reply_markup=start_keyboard())



async def main() -> None:
    bot = Bot(TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logger.success("–ë–æ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ")
    asyncio.run(create_tables())
    asyncio.run(main())
